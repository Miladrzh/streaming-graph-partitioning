val forwardText = sc.textFile("hdfs://192.168.152.200:9000/datasets/twitter/twitter_rv/twitter_rv.net")
val edges = forwardText.flatMap(e => Array( (e.split("\\t")(0).toInt, Set(e.split("\\t")(1).toInt) ) , (e.split("\\t")(1).toInt, Set(e.split("\\t")(0).toInt) ) ))
// val backwardEdges = forwardEdges.map(e => (e._2.last ,Set(e._1) ))

// val edges = forwardEdges.union(backwardEdges)

val adjacency = edges.reduceByKey( (l1, l2) => l1 ++ l2)

// METIS needs undirected graph, therefore we will add reverse of the each original edge
val undirectedEdges = adjacency.flatMap(vertex => {
    val sourceid = vertex._1
    val neighbours = vertex._2
    neighbours.map( n => Set( (n, sourceid)) )
})
val edgeCount = undirectedEdges.count

// assign order to each vertex in adjacency list, which will create the actual lookup table for METIS partitioner
// zipWithIndex indices start by 1 by default, so need post processing
val lookup = adjacency.map( t => t._1 ).zipWithIndex.map( t => (t._1, t._2 + 1))

//generate oldid - newid lookup table on one pass
lookup.saveAsObjectFile("hdfs://192.168.152.200:9000/datasets/twitter/metis-lookup")

// since lookup table is relatively small, we can broadcast it
val lookupMap = sc.broadcast(lookup.collectAsMap)
val vertexCount = lookupMap.value.size

// now we just need to iterate over graph and replace ids
val adjacencyWithIdentifiers = adjacency.map( vertex => {
    val sourceid = lookupMap.value.get(vertex._1).get
    val neighbours = vertex._2.map( n => lookupMap.value.get(n).get)
    (sourceid, neighbours)
})

// now we can output in METIS compatible format, eliminatng source id since METIS implicitly assumes line number is a source id
val metisAdjacency = adjacencyWithIdentifiers.map( l => l._2.mkString(" "))
val header = sc.parallelize(Seq( vertexCount + " " + (edgeCount / 2) )).coalesce(1)

header.saveAsTextFile("hdfs://192.168.152.200:9000/datasets/twitter/metis-header")
metisAdjacency.saveAsTextFile("hdfs://192.168.152.200:9000/datasets/twitter/metis")


